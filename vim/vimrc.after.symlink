colorscheme ir_black
let s:uname = system("echo -n \"$(uname)\"")
if s:uname == "Darwin"
  colorscheme default
endif
set noswapfile
set notimeout
set ttimeout
set timeoutlen=0

"set t_Co=256

" ----------------------------------------------------------------------------
"  Text Formatting
" ----------------------------------------------------------------------------

set autoindent             " automatic indent new lines
set smartindent            " be smart about it
inoremap # X<BS>#
set nowrap                 " do not wrap lines
set softtabstop=2          " yep, two
set shiftwidth=2           " ..
set tabstop=4
set expandtab              " expand tabs to spaces
set nosmarttab             " fuck tabs
set formatoptions+=n       " support for numbered/bullet lists
"set textwidth=80           " wrap at 80 chars by default
set virtualedit=block      " allow virtual edit in visual block ..

"highlight OverLength ctermfg=darkred guibg=#592929
"match OverLength /\%81v.\+/

"set colorcolumn=80
"highlight colorcolumn ctermbg=darkgrey ctermfg=1

"au BufWinEnter * let w:m1=matchadd('Search', '\%<79v.\%>79v', -1)
"au BufWinEnter * let w:m2=matchadd('OverLength', '\%>79v.\+', -1)
"highlight OverLength ctermfg=darkred guibg=#592929

let &colorcolumn=join(range(80,999),",")
highlight ColorColumn ctermbg=15 guibg=#111111 ctermfg=1
"jkdsfhalsdf iuasd f7284 iuzb slkcjag78 3174 rkjgzsdl;kfga78 362 3duhGASDfasdjlfg asjldg ofa8stf 0a68sdtf
"2345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890

" ----------------------------------------------------------------------------
"  Remapping
" ----------------------------------------------------------------------------

" lead with ,
let mapleader = ","

" exit to normal mode with 'jj'
inoremap jj <ESC>
inoremap jjj <ESC>jjj
inoremap kkk <ESC>kkk
inoremap lll <ESC>lll
inoremap hhh <ESC>hhh


" reflow paragraph with Q in normal and visual mode
nnoremap Q gqap
vnoremap Q gq

" sane movement with wrap turned on
nnoremap j gj
nnoremap k gk
vnoremap j gj
vnoremap k gk
nnoremap <Down> gj
nnoremap <Up> gk
vnoremap <Down> gj
vnoremap <Up> gk
inoremap <Down> <C-o>gj
inoremap <Up> <C-o>gk

" ----------------------------------------------------------------------------
"  UI
" ----------------------------------------------------------------------------

set ruler                  " show the cursor position all the time
set noshowcmd              " don't display incomplete commands
set nolazyredraw           " turn off lazy redraw
set number                 " line numbers
set wildmenu               " turn on wild menu
set wildmode=list:longest,full
set ch=2                   " command line height
set backspace=2            " allow backspacing over everything in insert mode
set whichwrap+=<,>,h,l,[,] " backspace and cursor keys wrap to
set shortmess=filtIoOA     " shorten messages
set report=0               " tell us about changes
set nostartofline          " don't jump to the start of line when scrolling


" ----------------------------------------------------------------------------
" Visual Cues
" ----------------------------------------------------------------------------

set showmatch              " brackets/braces that is
set mat=5                  " duration to show matching brace (1/10 sec)
set incsearch              " do incremental searching
set laststatus=2           " always show the status line
set ignorecase             " ignore case when searching
set nohlsearch             " don't highlight searches
" set visualbell             " shut the fuck up


" ---------------------------------------------------------------------------
"  Strip all trailing whitespace in file
" ---------------------------------------------------------------------------

function! StripWhitespace ()
    exec ':%s/ \+$//gc'
endfunction
map ,s :call StripWhitespace ()<CR>


" Search

nnoremap <C-F> :Ack 
nnoremap <A-F> :Ack -a 

" Convert ruby string to symbol
nnoremap ,: f"F"xi:<Esc>f"xF:


map <A-}> :tabn<CR>
map <A-{> :tabp<CR>

nnoremap ,g :e Gemfile<CR>
nnoremap ,G :e Gemfile.lock<CR>
nnoremap ,Re :e README<CR>
nnoremap ,Ap :e config/application.rb<CR>
nnoremap ,ap :e app/
nnoremap ,mo :e app/models/
nnoremap ,mu :e app/models/user.rb
nnoremap ,mp :e app/models/profile.rb
nnoremap ,co :e app/controllers/
nnoremap ,AC :e app/controllers/application_controller.rb<CR>
nnoremap ,ch :e app/controllers/helpers/
nnoremap ,he :e app/helpers/
nnoremap ,vi :e app/views/
nnoremap ,la :e app/views/layouts/
nnoremap ,sp :e spec/
nnoremap ,ssu :e spec/support/
nnoremap ,smo :e spec/models/
nnoremap ,sco :e spec/controllers/
nnoremap ,sre :e spec/requests/
nnoremap ,li :e lib/
nnoremap ,ga :e lib/gateways/

nnoremap <A-S-Q> :qall<CR>

set vb t_vb=

map <Leader>1 1gt
map <Leader>2 2gt
map <Leader>3 3gt
map <Leader>4 4gt
map <Leader>5 5gt
map <Leader>6 6gt
map <Leader>7 7gt
map <Leader>8 8gt
map <Leader>9 9gt

imap <A-1> <Esc>1gt
imap <A-2> <Esc>2gt
imap <A-3> <Esc>3gt
imap <A-4> <Esc>4gt
imap <A-5> <Esc>5gt
imap <A-6> <Esc>6gt
imap <A-7> <Esc>7gt
imap <A-8> <Esc>8gt
imap <A-9> <Esc>9gt

"noremap <leader>F :%s/,\ focus:\ true//ge<CR>
"noremap <leader>f  ? it <CR>2f"a, focus: true<Esc>
noremap <Leader>f :Ack 
noremap <Leader>F :Ack -a 


" source: http://www.vimninjas.com/2012/08/30/local-vimrc/
" Do we have local vimrc?
if filereadable('.vimrc.local')
  " If so, go ahead and load it.
  source .vimrc.local
endif

set textwidth=0
set wrapmargin=0

let g:RspecBin="zeus rspec"

noremap <A-r>f :RunSpec<CR>zRn
noremap <A-r>l :RunSpecLine<CR>zRn
noremap <A-r>a :RunSpecs<CR>zRn

noremap <A-w> :q<CR>
noremap <A-c> <C-w>3j:q<CR>

noremap <A-h> <C-w>h
noremap <A-j> <C-w>j
noremap <A-k> <C-w>k
noremap <A-l> <C-w>l

noremap <Leader>j A;<Esc>J
noremap <Leader>p orequire 'pry'; binding.pry<Esc>

noremap <C-A-S-P> :CtrlPClearCache<CR>

" Task management
noremap <A-t>c <Esc>:.s/^[^\-]*\-/CURRENT-/g<CR>
noremap <A-t>d <Esc>:.s/^[^\-]*\-/Done-/g<CR>
noremap <A-t>x <Esc>:.s/^[^\-]*\-/-/g<CR>


" noremap =y "+y
" noremap =p "+p
" noremap =P "+P
" noremap =d "+d

noremap =y :w !xsel --clipboard<CR><CR>
noremap =p :r !xsel --clipboard<CR><CR>

" Rspec
function! RSpecFile()
  execute("!clear && rspec " . expand("%p"))
endfunction
map <leader>R :call RSpecFile() <CR>
command! RSpecFile call RSpecFile()

function! RSpecCurrent()
  execute("!clear && rspec " . expand("%p") . ":" . line("."))
endfunction
command! RSpecCurrent call RSpecCurrent()


noremap <leader>rr  :execute("!rspec " . expand("%p") . ":" . line("."))<CR>
noremap <leader>rf  :execute("!rspec " . expand("%p"))<CR>
noremap <leader>zrr :execute("!zpec " . expand("%p") . ":" . line("."))<CR>
noremap <leader>zrf :execute("!zpec " . expand("%p"))<CR>
noremap <leader>srr :execute("!spec " . expand("%p") . ":" . line("."))<CR>
noremap <leader>srf :execute("!spec " . expand("%p"))<CR>

" copy FILE:LINE to clipboard
noremap =l :execute("!echo '" . expand("%p") . ":" . line(".") . "' \| xsel --clipboard")<CR><CR>
" copy FILE to clipboard
noremap =f :execute("!echo '" . expand("%p") . "' \| xsel --clipboard")<CR><CR>

noremap <leader><C-p> :CtrlPClearCache<CR>

noremap <leader>gs :!git status<CR>
noremap <leader>gl :!git log<CR>
noremap <leader>gd :!git diff<CR>
noremap <leader>gD :!git diff --cached<CR>

noremap <leader>] :tabn<CR>
noremap <leader>[ :tabp<CR>

noremap \] :tabn<CR>
noremap \[ :tabp<CR>

noremap '' :tabn<CR>
noremap ;; :tabp<CR>

noremap \' :BuffergatorTabsOpen<CR>

call janus#add_mapping('nerdcommenter', 'map', '<C-/>', '<plug>NERDCommenterToggle<CR>')
call janus#add_mapping('nerdcommenter', 'imap', '<c-/>', '<esc><plug>nerdcommentertoggle<cr>i')
call janus#add_mapping('nerdcommenter', 'map', '<Leader>/', '<plug>NERDCommenterToggle<CR>')
call janus#add_mapping('nerdcommenter', 'imap', '<A-/>', '<Esc><plug>NERDCommenterToggle<CR>i')

" rspec: wrap the entire line in 'expect(<line>).to eq(<cursor>)'
imap <C-e> <Esc>^iexpect(<Esc>A).to eq()<Esc>i


"nnoremap <C-J> <C-W><C-J>
"nnoremap <C-K> <C-W><C-K>
"nnoremap <C-L> <C-W><C-L>
"nnoremap <C-H> <C-W><C-H>
if exists('$TMUX')
  function! TmuxOrSplitSwitch(wincmd, tmuxdir)
    let previous_winnr = winnr()
    execute "wincmd " . a:wincmd
    if previous_winnr == winnr()
" The sleep and & gives time to get back to vim so tmux's focus tracking
" can kick in and send us our ^[[O
      execute "silent !sh -c 'sleep 0.01; tmux select-pane -" . a:tmuxdir . "' &"
      redraw!
    endif
  endfunction

  let previous_title = substitute(system("tmux display-message -p '#{pane_title}'"), '\n', '', '')
  let &t_ti = "\<Esc>]2;vim\<Esc>\\" . &t_ti
  let &t_te = "\<Esc>]2;". previous_title . "\<Esc>\\" . &t_te

  nnoremap <silent> <C-h> :call TmuxOrSplitSwitch('h', 'L')<cr>
  nnoremap <silent> <C-j> :call TmuxOrSplitSwitch('j', 'D')<cr>
  nnoremap <silent> <C-k> :call TmuxOrSplitSwitch('k', 'U')<cr>
  nnoremap <silent> <C-l> :call TmuxOrSplitSwitch('l', 'R')<cr>
else
  map <C-h> <C-w>h
  map <C-j> <C-w>j
  map <C-k> <C-w>k
  map <C-l> <C-w>l
endif


nnoremap <Leader>8 :vertical resize 83<CR>

set winwidth=83
set winminwidth=35

set winheight=10
set winminheight=10
set winheight=999



function! ShowRoutes()
  " Requires 'scratch' plugin
  :topleft 100 :split __Routes__
  " Make sure Vim doesn't write __Routes__ as a file
  :set buftype=nofile
  " Delete everything
  :normal 1GdG
  " Put routes output in buffer
  :0r! rake -s routes
  " Size window to number of lines (1 plus rake output length)
  :exec ":normal " . line("$") . _ "
  " Move cursor to bottom
  :normal 1GG
  " Delete empty trailing line
  :normal dd
endfunction
map <leader>gR :call ShowRoutes()<cr>


nnoremap <leader><leader> <c-^>

nnoremap <Leader>' F"r'<Esc>f"r'<Esc>
nnoremap <Leader>" F'r"<Esc>f'r"<Esc>

function! RunTests(filename)
    " Write the file and run tests for the given filename
    :w
    :silent !echo;echo;echo;echo;echo
    "exec ":!" . t:test_cmd . " " . a:filename
    "exec ":!tmux send-keys -t second:1.1 \"" . t:test_cmd . " " . a:filename . "\" Enter"
    exec g:test_executor_before . t:test_cmd . " " . a:filename . g:test_executor_after
endfunction

function! SetTestFile()
    " Set the spec file that tests will be run for.
    let t:grb_test_file=@%
endfunction

function! RunTestFile(...)
    if a:0
        let command_suffix = a:1
    else
        let command_suffix = ""
    endif

    " Run the tests for the previously-marked file.
    let in_spec_file = match(expand("%"), '_spec.rb$') != -1
    if in_spec_file
        call SetTestFile()
    elseif !exists("t:grb_test_file")
        return
    end
    call RunTests(t:grb_test_file . command_suffix)
endfunction

function! RunNearestTest()
    let spec_line_number = line('.')
    call RunTestFile(":" . spec_line_number)
endfunction

function! SetTestCmd(cmd)
    let t:test_cmd=a:cmd
endfunction
call SetTestCmd("zpec")

nnoremap <Leader>sz :call SetTestCmd("time zpec")<CR>
nnoremap <Leader>sr :call SetTestCmd("time rspec")<CR>
nnoremap <Leader>ss :call SetTestCmd("time spec")<CR>

function! SetTestExecutor(c_before, c_after)
    let g:test_executor_before=a:c_before
    let g:test_executor_after=a:c_after
endfunction
call SetTestExecutor(":!tmux send-keys -t second:1.1 \"", "\" Enter")

nnoremap <Leader>sa :call SetTestExecutor(":!tmux send-keys -t 1.2 \"", "\" Enter")<CR>
nnoremap <Leader>sb :call SetTestExecutor(":!tmux send-keys -t 2.1 \"", "\" Enter")<CR>
nnoremap <Leader>sc :call SetTestExecutor(":!tmux send-keys -t second:1.1 \"", "\" Enter")<CR>
nnoremap <Leader>si :call SetTestExecutor(":!", "")<CR>


" Run this file
map <silent> <leader>t :call RunTestFile()<cr><cr>
" Run only the example under the cursor
map <leader>T :call RunNearestTest()<cr><cr>
" Run all test files
map <leader>a :call RunTests('spec')<cr><cr>


":!tmux send-keys -t 2:0.0 "zpec %:p" Enter

nnoremap <Leader>,c :let @/ = ""<CR>
